<div id='document'>
  
  <div itemscope itemtype="http://schema.org/Person">
    <h1 itemprop="name">Mark J. Lorenz</h1>
    <!--<img src="janedoe.jpg" itemprop="image" />-->

    <div class='contact'>
      <div itemprop="address" itemscope itemtype="http://schema.org/PostalAddress">
        <span itemprop="streetAddress">1756 Darrow Dr.</span>
        <span itemprop="addressLocality">Powell</span>,
        <span itemprop="addressRegion">OH</span>
        <span itemprop="postalCode">43065</span>
      </div>
      <span itemprop="telephone">(614) 537-6728</span>
      <a href="mailto:markjlorenz@gmail.com" itemprop="email">MarkJLorenz@gmail.com</a>
      <a href="https://github.com/dapplebeforedawn" itemprop="url">On GitHub</a>
    </div>
    <div style='clear:both;'><!--annoying hack--></div>
  </div>

  <div class='separator'><hr /></div>

  <div class='experience-section'>
    <h3>Ruby on Rails Experience:</h2>
    <ul>
      <li>
        <p>Building <%= link_to "LuxeLedger", 'http://www.luxeledger.com' %> I gained a very thorough understanding of both front-end and back-end Ruby on Rails.  The back end has some very specialized routing, nested models and has_many_through relationships.  I also took advanted of the plugin architecture of Rails to build specialized plugins to handle sales tax calculation, user generated reports and build a multitenant environment using PostgreSQL schemas.<p>
        <p>The front-end of LuxeLedger taught me how to write semantic HTML, and work with AJAX loaded content.
        </p>
      </li>
      <li>
        <p>Building <%= link_to "MessagesOnAMission", 'http://build.messagesonamission.com' %> I learned how to manage complexity when sharing data with a polyglot (Node.js in this case) application addressed at a different domain.  The Rails side of MessagesOnAMission is basically just an administration and setup page, but it needed to be able to supply data to the workhorse, Node.js application that my users would be interacting with.<p>
        <p>An informed eye will notice that MessagesOnAMission relies heavily on <%= link_to "TwitterBootstrap", "http://twitter.github.com/bootstrap/" %> for markup and styling.  Using Bootstrap is a humbling experience, those gents know CSS far better than I every will. </p>
      </li>
    </ul>
  </div>

  <div class='experience-section'>
    <h3>Test Experience:</h2>
    <ul>
      <li>
        <p>
          My more recent web applications have had a strong emphasis on testing.  I use Rspec, Cucumber, Capybara and FactoryGirl to ensure that my applications work the way I want them to, even after a refactor.  
        </p>
        <p>The open source applications do not include any non-generated test code.  It's been a real learning experience to see all the unexpected ways an application can break when a new feature is added, or an existing one removed.  You could say I'm a school of hard knocks test devotee.  Since I don't have any open sourced test code, I love to talk about your situation, and how we'd spec and test it.</p>
      </li>
    </ul>
  </div>

  <div class='experience-section'>
    <h3>Node.js, Socket.io and Express.js Experience:</h2>
    <ul>
      <li>
        <p>The actual application side of MessagesOnAMission is written using Node.js, Socket.io and Express.js.  The use of these technologies showed me that javascript is way more than just jQuery, and in many ways is a language powerful enough to dethrone Ruby as my favorite language (well, almost) </p> 
        <p>MessagesOnAMission uses a pretty novel templating system that allows users to pick from different animations, and apply them to their presentation.  Even though the animations may have different options, and layout requirements, using my templating system I can quickly add new animations.  For example, see the "fish bowl" animation, as opposed to "movie credits" animation.  All this is done without the future-fragile need to store markup specific code in the database.</p>
      </li>
    </ul>
  </div>

  <div class='experience-section'>
    <h3>jQuery Experience:</h2>
    <ul>
      <li>
        <p>LuxeLedger would not have been possible without jQuery and the jQuery UI.  Building LuxeLedger, I learned how to effective use the UI widgets, and ended up writing several custom jQuery widgets.</p> 
        <p>LuxeLedger also takes advantage of the DOM manipulation and asyncronous javascript features of jQuery to progressively enhance the user experience.</p>
      </li>
    </ul>
  </div>

  <%= render 'mobile_experience' %>

  <%= render 'shipped_applications' %>

  <%= render 'work_and_education' %>

</div>

<script type="text/javascript">
jQuery(function($){
  $('h1').CreateBubblePopup({
    position: 'top',
    align: 'center',
    innerHtml: '<img src="/images/ajax-loader.gif" style="border:0px; vertical-align:middle; margin-right:10px; display:inline;" />loading!',
    innerHtmlStyle: { color:'#FFFFFF', 'text-align':'center' },
    selectable: true,
    themeName: 'azure',
    themePath: '/images/jquerybubblepopup-theme'
  });

  // add a mouseover event for the "button" element...
  $('h1').mouseover(function(){
    var button = $(this);
    $.get('/me.html', function(data) {
      button.SetBubblePopupInnerHtml(data, true);
    }); 
  });
});
</script>
